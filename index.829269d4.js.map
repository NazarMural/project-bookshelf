{"mappings":"AAEOA,eAAeC,EAAkBC,GACtC,MAAMC,QAAiBC,MAAM,6CAAcF,KAC3C,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAMH,EAASI,QAI3B,aAF4BJ,EAASK,M,CCLvC,MAAMC,EAAO,CACXC,eAAgBC,SAASC,cAAc,uBAGzCX,EAAkB,aACfY,MAAKC,IACJC,QAAQC,IAAIF,GAIZC,QAAQC,IAAIF,EAAmB,GAAGG,WAiCtC,SAAwCC,GACtC,MAAMC,EAASD,EACZE,KACC,EAACH,UAAEA,KAAgB,yEAESA,2GAIJA,0CAIzBI,KAAK,IAERZ,EAAKC,eAAeY,mBAAmB,YAAaH,E,CA/ClDI,CAA+BT,GAC/BL,EAAKe,mBAAqBb,SAASc,iBACjC,yBASN,SAA8BX,GAC5B,IAAIY,EAAmB,EAEvBX,QAAQC,IAAIF,EAAmBY,GAAkBC,OAEjDlB,EAAKe,mBAAmBI,SAAQC,IAC9B,MAAMV,EAASL,EAAmBY,GAAkBC,MACjDP,KAAI,EAACU,WAAEA,EAAUC,MAAEA,EAAKC,OAAEA,KAClB,yCAEOF,WAAoBC,sBAC1BA,wBACDC,2BAGRX,KAAK,IACRQ,EAAQP,mBAAmB,YAAaH,GACxCO,GAAkB,G,CAvBlBO,CAAqBnB,EAAmB,IAEzCoB,OAAM,KACLnB,QAAQC,IAAI,sBAAsB,ICnB/BhB,eAAemC,EAAkBjC,GACtC,MAAMC,QAAiBC,MAAM,+DAAcF,KAC3C,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAMH,EAASI,QAI3B,aAFuBJ,EAASK,M,CCLlC,MAAM4B,EAAezB,SAASC,cAAc,oBACtCyB,EAAc1B,SAASC,cAAc,sBACrC0B,EAAe3B,SAASC,cAAc,uBAE5CwB,EAAaG,iBAAiB,SAE9BvC,eAA+BwC,GAE7B,GADAA,EAAIC,kBACCD,EAAIE,OAAOC,UAAUC,SAAS,kBACjC,OAYkBjC,SAASc,iBAAiB,mBAClCG,SAAQiB,IAClBA,EAASF,UAAUG,OAAO,mBAAmB,IAX/CT,EAAYU,UAAY,GACxB,MAAMF,EAAWL,EAAIE,OAAOM,YAC5BR,EAAIE,OAAOC,UAAUM,IAAI,oBACzBX,EAAaU,YAAcH,GAY7B,SAA2BA,GACzB,MAAM1B,EAAS0B,EACZzB,KAAI8B,IACH,MAAMpB,WAAEA,EAAUC,MAAEA,EAAKC,OAAEA,GAAWkB,EACtC,MAAO,6BAEGpB,WAAoBC,gBAC1BA,kBACDC,kBACC,IAELX,KAAK,IACRgB,EAAYf,mBAAmB,YAAaH,E,CAtB5CgC,OAD2BhB,EAAkBU,G,IChB/C,MAAMO,EAAezC,SAASC,cAAc,oBAK1CwC,EAAa9B,mBAAmB,aAD9B,2EAMJtB,iBACE,MAAMqD,QAAqBpD,EAAkB,iBACvCqD,EAAc,GACpB,IAAK,MAAMrC,UAAEA,KAAeoC,EAC1BC,EAAYC,KAAKtC,GAEnBF,QAAQC,IAAIsC,GACZ,MAAMnC,EAASmC,EACZE,MAAK,CAACC,EAAGC,IAAMD,EAAEE,cAAcD,KAC/BtC,KACC8B,GACE,gEAAgEA,eAEnE7B,KAAK,IACR+B,EAAa9B,mBAAmB,YAAaH,E,CAG/CyC","sources":["src/js/fetch-search-result.js","src/js/markup-top-books.js","src/js/fetch-category.js","src/js/book-category.js","src/js/markup-category-list.js"],"sourcesContent":["const BASE_URl = 'https://books-backend.p.goit.global/books/';\n\nexport async function fetchSearchResult(requestTheme) {\n  const response = await fetch(`${BASE_URl}${requestTheme}`);\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  const arrayElements = await response.json();\n\n  return arrayElements;\n}\n","import { fetchSearchResult } from './fetch-search-result';\n\nconst refs = {\n  booksCardsList: document.querySelector('.books-cards__list'),\n};\n\nfetchSearchResult('top-books')\n  .then(categoriesTopBooks => {\n    console.log(categoriesTopBooks);\n    // console.log(topBooks[0].list_name);\n    // console.log(createCategoriesMarkup(categories));\n    // addMarkup(refs.listCategories, createCategoriesMarkup(categories));\n    console.log(categoriesTopBooks[0].list_name);\n    createCategoriesTopBooksMarkup(categoriesTopBooks);\n    refs.topBooksCategories = document.querySelectorAll(\n      '.top-books-categories'\n    );\n\n    createTopBooksMarkup(categoriesTopBooks);\n  })\n  .catch(() => {\n    console.log('Проблема з запитом!');\n  });\n\nfunction createTopBooksMarkup(categoriesTopBooks) {\n  let numberCategories = 0;\n\n  console.log(categoriesTopBooks[numberCategories].books);\n\n  refs.topBooksCategories.forEach(element => {\n    const markup = categoriesTopBooks[numberCategories].books\n      .map(({ book_image, title, author }) => {\n        return `\n          <li>\n          <img src=\"${book_image}\" alt=\"${title}\">\n          <h2>${title}</h2>\n          <p>${author}</p>\n          </li>`;\n      })\n      .join('');\n    element.insertAdjacentHTML('beforeend', markup);\n    numberCategories++;\n  });\n}\n\nfunction createCategoriesTopBooksMarkup(categories) {\n  const markup = categories\n    .map(\n      ({ list_name }) => `\n    <li class=\"books-cards__item\">\n    <h2 class=\"top-books-title\">${list_name}</h2>\n    <ul class=\"top-books-categories\">\n                \n    </ul>\n    <button data-list_name=\"${list_name}\">See More</button>\n    </li>\n    `\n    )\n    .join('');\n\n  refs.booksCardsList.insertAdjacentHTML('beforeend', markup);\n}\n\n// function addMarkup(ref, markup) {\n//   ref.insertAdjacentHTML('beforeend', markup);\n// }\n","const BASE_URl = 'https://books-backend.p.goit.global/books/category?category=';\n\nexport async function fetchCategoryList(requestTheme) {\n  const response = await fetch(`${BASE_URl}${requestTheme}`);\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n  const category = await response.json();\n\n  return category;\n}\n","import { fetchCategoryList } from './fetch-category';\n\nconst listCategory = document.querySelector('.list-categories');\nconst bookSection = document.querySelector('.books-cards__list');\nconst sectionTitle = document.querySelector('.books-cards__title');\n\nlistCategory.addEventListener('click', onClickCategory);\n\nasync function onClickCategory(evt) {\n  evt.preventDefault();\n  if (!evt.target.classList.contains('category__link')) {\n    return;\n  }\n  removeCurrentClass();\n  bookSection.innerHTML = '';\n  const category = evt.target.textContent;\n  evt.target.classList.add('current-category');\n  sectionTitle.textContent = category;\n  const categoryItem = await fetchCategoryList(category);\n  createMarkupBooks(categoryItem);\n}\n\nfunction removeCurrentClass() {\n  const allCategory = document.querySelectorAll('.category__link');\n  allCategory.forEach(category => {\n    category.classList.remove('current-category');\n  });\n}\n\nfunction createMarkupBooks(category) {\n  const markup = category\n    .map(item => {\n      const { book_image, title, author } = item;\n      return `\n    <li>\n    <img src=\"${book_image}\" alt=\"${title}\">\n    <h2>${title}</h2>\n    <p>${author}</p>\n    </li>`;\n    })\n    .join('');\n  bookSection.insertAdjacentHTML('beforeend', markup);\n}\n","import { fetchSearchResult } from './fetch-search-result';\n\nconst listCategory = document.querySelector('.list-categories');\n\nfunction getMarkupAllCategory() {\n  const markup =\n    '<li><a href=\"./index.html\" class=\"category__link\">All category</a></li>';\n  listCategory.insertAdjacentHTML('afterbegin', markup);\n}\n\ngetMarkupAllCategory();\n\nasync function getMarkupCategoryList() {\n  const categoryList = await fetchSearchResult('category-list');\n  const categoryArr = [];\n  for (const { list_name } of categoryList) {\n    categoryArr.push(list_name);\n  }\n  console.log(categoryArr);\n  const markup = categoryArr\n    .sort((a, b) => a.localeCompare(b))\n    .map(\n      item =>\n        `<li class=\"category__item\"><a href=\"\" class=\"category__link\">${item}</a></li>`\n    )\n    .join('');\n  listCategory.insertAdjacentHTML('beforeend', markup);\n}\n\ngetMarkupCategoryList();\n"],"names":["async","$f7f0770515855920$export$8c2dda8bf3bd2faf","requestTheme","response","fetch","ok","Error","status","json","$d0d414804acfff59$var$refs","booksCardsList","document","querySelector","then","categoriesTopBooks","console","log","list_name","categories","markup","map","join","insertAdjacentHTML","$d0d414804acfff59$var$createCategoriesTopBooksMarkup","topBooksCategories","querySelectorAll","numberCategories","books","forEach","element","book_image","title","author","$d0d414804acfff59$var$createTopBooksMarkup","catch","$f49a6fd6e2af787b$export$733bdd6f03c986d2","$46ea6eb8fd8011f2$var$listCategory","$46ea6eb8fd8011f2$var$bookSection","$46ea6eb8fd8011f2$var$sectionTitle","addEventListener","evt","preventDefault","target","classList","contains","category","remove","innerHTML","textContent","add","item","$46ea6eb8fd8011f2$var$createMarkupBooks","$2175d1d76e4e8147$var$listCategory","categoryList","categoryArr","push","sort","a","b","localeCompare","$2175d1d76e4e8147$var$getMarkupCategoryList"],"version":3,"file":"index.829269d4.js.map"}